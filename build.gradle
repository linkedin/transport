// Copyright 2019 LinkedIn Corporation. All rights reserved.
// Licensed under the BSD-2 Clause license.
// See LICENSE in the project root for license information.

allprojects {
  apply plugin: 'idea'
}

buildscript {
  repositories {
    jcenter()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
    classpath 'org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:1.0.1'
    classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0'
  }
}

if (project.hasProperty('overrideBuildEnvironment')) {
  //The property is automatically passed to the Gradle build when the project is built at LinkedIn
  //The property contains the file path to a script plugin that 'adapts' this OS project to LinkedIn
  //In order to adapt the project, we need to apply this script plugin:
  apply from: project.overrideBuildEnvironment
} else {
  //If the property is not set the project is built outside of LinkedIn
  //Applying default build logic for an OS build:
  apply from: "defaultEnvironment.gradle"
}

subprojects {
  apply plugin: "com.github.hierynomus.license"

  license {
    header = file("${rootDir}/gradle/license/LICENSE_HEADER")
    ext.year = Calendar.getInstance().get(Calendar.YEAR)
    skipExistingHeaders true
    ignoreFailures false
    strictCheck true
  }

  plugins.withType(JavaPlugin) {
    project.apply(plugin: 'checkstyle')

    dependencies {
      testCompile 'org.testng:testng:6.11'
    }

    test {
      useTestNG()
    }

    checkstyle {
      configFile = file("${rootDir}/gradle/checkstyle/linkedin-checkstyle.xml")
    }
  }

  plugins.withType(ScalaPlugin) {
    project.apply(plugin: 'scalaStyle')

    scalaStyle {
      configLocation = "${rootDir}/gradle/scalastyle/scalastyle-config.xml"
      source = sourceSets.main.allScala
      testSource = sourceSets.test.allScala
      includeTestSourceDirectory = true
    }
    check.dependsOn scalaStyle
  }
}
